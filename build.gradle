plugins {
    id "fabric-loom" version "0.12-SNAPSHOT"
    id "maven-publish"
    id "com.modrinth.minotaur" version "2.+"
    id "de.guntram.mcmod.crowdin-translate" version "1.4+1.18.2"
}

// configure crowdin
crowdintranslate.crowdinProjectName = "aether"
crowdintranslate.minecraftProjectName = "the_aether"
crowdintranslate.verbose = true

JavaLanguageVersion targetVersion = JavaLanguageVersion.of(17)

allprojects {
    // allow more then 100 errors to be displayed
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xmaxerrs" << "${project.max_errors}"
        }
    }
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "fabric"
        url = "https://maven.fabricmc.net/"
    }
    maven {
        name = "haven-king"
        url = "https://hephaestus.dev/release"
    }
    maven {
        name = "terraformers"
        url = "https://maven.terraformersmc.com/releases/"
    }
    maven {
        name = "ladysnake"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
    }
    maven {
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "kryptonaught"
        url = "https://maven.kyrptonaught.dev/"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "jamieswhiteshirt"
        url "https://maven.jamieswhiteshirt.com/libs-release/"
    }
    maven {
        name = "gudenau"
        url = "https://maven.gudenau.net"
        content {
            includeGroup "net.gudenau.minecraft"
        }
    }
    mavenCentral()
}

// set location of access widener
loom {
    accessWidenerPath = file("src/main/resources/the_aether.accesswidener")
}

dependencies {
    // to update dependency versions go to gradle.properties

    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.mappings_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // libraries

    // reach entity attributes: additional entity attributes for reach distance and attack range
    modImplementation(include("com.jamieswhiteshirt:reach-entity-attributes:${project.entity_attributes_version}"))

    // crowdin: translations
    modImplementation(include("com.github.CDAGaming.CrowdinTranslate:crowdin-translate:${project.crowdin_translate_version}"))

    // cardinal components, entity and base
    modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_version}"))
    modImplementation(include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_version}"))

    // incubus core: definitely the most important of libraries :unsmug:
    modImplementation(include("com.github.devs-immortal:Incubus-Core:${project.incubus_version}"))

    // simply use full fabric api
    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}")

    // modmenu and rei: testing only, do not JiJ
    modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")
    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")

    // custom portal api: massively simplifies setting up a portal
    modImplementation(include("net.kyrptonaught:customportalapi:${project.customportalapi_version}"))

    // trinkets: used for parachutes, rings etc.
    modImplementation(include("dev.emi:trinkets:${project.trinkets_version}"))

    // more tags: used for increased compatibility
    modImplementation(include("net.gudenau.minecraft:MoreTags:${project.moretags_version}"))
    modImplementation(include("net.gudenau.minecraft:RecipeConfidence:${project.recipeconfidence_version}"))

    // satin: required for the funny rainbow tree leaves
    modImplementation(include("io.github.ladysnake:satin:${project.satin_version}"))
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// set java version
java {
    toolchain {
        languageVersion = targetVersion
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
// if Javadoc is generated, this must be specified in that task too
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}

// if you remove this task, sources will not be generated
java {
    withSourcesJar()
}

// task for publishing to modrinth
//modrinth {
//    BufferedReader br = new BufferedReader(new InputStreamReader(System.in))
//    System.out.println("Enter the modrinth auth token: ")
//    token = br.readLine()
//    System.out.println("Enter the version name: (version number: " + project.mod_version + ")")
//    versionName = br.readLine()
//    System.out.println("Enter changelog:")
//    changelog = br.readLine()
//
//    // game versions are automatically read by minotaur, do not set
//    versionNumber = project.mod_version // get project version from gradle.properties
//    projectId = "IKpsG0nF" // set project id
//    versionType = "beta" // set version type to beta - change this on full release
//    uploadFile = remapJar // generate jar to be uploaded
//    loaders = ["fabric"] // set loader to fabric
//
//    dependencies {
//        required.project "P7dR8mSH" // creates a dependency on fabric api
//    }
//}

jar {
    manifest {
        attributes "Implementation-Title": "ParadiseLost",
                "Implementation-Version": project.version,
                "Main-Class": "com.aether.executable.InstallerGUI"
    }
    from "LICENSE.md"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // repositories to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

// ensure crowdin translations are downloaded
build {
    dependsOn downloadTranslations
}
